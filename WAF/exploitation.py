import sys

import requests


def send_request(ip, route, data, cookies, method):
    if method == "POST":
        r = requests.post(f"http://{ip}/vulnerabilities/{route}/",
                          cookies=cookies,
                          data=data)
    else:
        r = requests.get(f"http://{ip}/{route}/",
                         cookies=cookies,
                         params=data)
    if r.status_code == 403:
        return True
    return False


checker = {
    "Command Injection": [
        ["exec", {'ip': '&& ls', "Submit": "Submit"}, "POST"],
        ["exec", {'ip': '; pwd', "Submit": "Submit"}, "POST"],
        ["exec", {'ip': '&cat /etc/passwd', "Submit": "Submit"}, "POST"],
        ["exec", {'ip': '|cat /etc/hosts', "Submit": "Submit"}, "POST"],
    ],
    "File Inclusion": [
        ["fi", {'page': '../../../../../etc/passwd'}, "GET"],
        ["fi", {'page': '/etc/sysctl.conf'}, "GET"],
        ["fi", {'page': 'file:///etc/hosts'}, "GET"],
    ],
    "SQL Injection": [
        ["sqli", {'id': "1' union select user,password from users -- -", "Submit": "Submit"}, "GET"],
        ["sqli", {'id': "%' or 0=0 union select null, user() #", "Submit": "Submit"}, "GET"],
        ["sqli", {
            'id': "admin' and 1=0 union select null, concat(first_name,0x0a,last_name,0x0a,user,0x0a,password) from users #",
            "Submit": "Submit"}, "GET"],
    ],
    "XSS Reflected": [
        ["xss_r", {"name": "<script>alert('xss')</script>"}, "GET"],
        ["xss_r", {"name": "<Script>alert('xss')</Script>"}, "GET"],
        ["xss_r", {"name": "<script src=1 href=1 onerror='javascript:alert(1)'></script>"}, "GET"],
        ["xss_r", {"name": "<img src=x onerror=alert(document.cookie)>"}, "GET"],
        ["xss_r", {"name": "<body onload=alert('bingo')>"}, "GET"]
    ]
}

if __name__ == '__main__':
    if len(sys.argv) > 1:
        cookie = sys.argv[1]
        ip = sys.argv[2] if len(sys.argv) == 3 else "localhost"

        cookies = {"PHPSESSID": cookie,
                   "security": "low"}
        for key, payloads in checker.items():
            result = list()
            for route, data, method in payloads:
                result.append(send_request(ip, route, data, cookies, method))
            if all(result):
                print(f"[{key}]: OK")
            else:
                percent = 100 - round(sum(result) / len(result) * 100, 2)
                print(f"[{key}]: Vulnerable {percent}%")
